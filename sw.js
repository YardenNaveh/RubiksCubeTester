// This is a service worker file that will be processed by workbox-build
// We'll keep the import format since service workers use a different module system
// and this content gets injected into the final service worker file

import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

// This placeholder will be replaced by the list of files to precache generated by workbox-build
precacheAndRoute([{"revision":"2628318f2cdee571804e9dd22b9ed705","url":"assets/index-BgqlQCVg.css"},{"revision":"9f6f7e6e202a899f0feaa4f9b3ab0d60","url":"assets/index-D5wezpQl.js"},{"revision":"bb4e46b2fced0fcae0c46ed589f02d82","url":"favicon.svg"},{"revision":"02a68c655bbd88bfd55584e98872b043","url":"index.html"},{"revision":"7215ee9c7d9dc229d2921a40e899ec5f","url":"logo192.png"},{"revision":"7215ee9c7d9dc229d2921a40e899ec5f","url":"logo512.png"}]);

// Example runtime caching (optional)
registerRoute(
  ({request}) => request.destination === 'image',
  new StaleWhileRevalidate({
    cacheName: 'images',
  })
);

self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
}); 